generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid()) @db.Uuid
  name            String
  email           String     @unique
  password        String
  rutEmpresa      String?
  razonSocial     String?
  giro            String?
  direccion       String?
  certificateToken String?   // Campo para almacenar el token del certificado digital
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  clientes        Cliente[]
  facturas        Factura[]
  products        Producto[]
}

model Producto {
  id             Int      @id @default(autoincrement())
  codigo         String
  descripcion    String
  cantidad       Int
  unidadMedida   String
  precioUnitario Decimal
  descuento      Decimal  @default(0.00)
  montoNeto      Decimal
  iva            Decimal  @default(12.00)
  montoTotal     Decimal
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user_id        String   @db.Uuid
  user           User     @relation(fields: [user_id], references: [id])
}

model Cliente {
  id          Int      @id @default(autoincrement())
  rut         String   @unique
  razonSocial String
  giro        String
  direccion   String
  comuna      String
  ciudad      String?
  contacto    String?
  telefono    String?
  user_id     String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
}

model Factura {
  id                  Int              @id @default(autoincrement())
  tipoDTE             Int
  fechaEmision        DateTime         @default(now())
  razonSocialEmisor   String
  rutEmisor           String
  rutReceptor         String
  razonSocialReceptor String
  direccionReceptor   String
  comunaReceptor      String
  ciudadReceptor      String?
  contactoReceptor    String?
  montoNeto           Decimal          @db.Decimal(10, 2)
  iva                 Decimal          @db.Decimal(10, 2)
  montoTotal          Decimal          @db.Decimal(10, 2)
  estado              EstadoFactura    @default(EMITIDA)
  observaciones       String?
  user_id             String           @db.Uuid
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  detalles            DetalleFactura[]
  user                User             @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model DetalleFactura {
  id          Int     @id @default(autoincrement())
  cantidad    Int
  descripcion String
  precioUnit  Decimal @db.Decimal(10, 2)
  descuento   Decimal @default(0) @db.Decimal(10, 2)
  montoNeto   Decimal @db.Decimal(10, 2)
  factura_id  Int
  factura     Factura @relation(fields: [factura_id], references: [id])

  @@index([factura_id])
}

enum EstadoFactura {
  EMITIDA
  NO_ENVIADA
  ENVIADA
  ANULADA
}
